Index: src/test/java/iteration_2/DepositAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package iteration_2;\r\n\r\nimport io.restassured.RestAssured;\r\nimport io.restassured.filter.log.RequestLoggingFilter;\r\nimport io.restassured.filter.log.ResponseLoggingFilter;\r\nimport io.restassured.http.ContentType;\r\nimport org.apache.http.HttpStatus;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.DisplayName;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.Arguments;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.util.stream.Stream;\r\n\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\npublic class DepositAccount {\r\n    String adminToken;\r\n    String user1Token;\r\n    String user2Token;\r\n    //Генерация уникальных userName для каждого теста\r\n    String user1Username = \"A_\" + System.currentTimeMillis(); // \"kate001_123456\"\r\n    String user2Username = \"B_\" + System.currentTimeMillis(); // \"kate002_123456\"\r\n    static int firstAccountUser1;\r\n    static int secondAccountUser1;\r\n    static Random random = new Random();\r\n\r\n    public int createAccount() {\r\n        return given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                .post(\"http://localhost:4111/api/v1/accounts\")\r\n                .then()\r\n                .statusCode(HttpStatus.SC_CREATED)\r\n                .extract()\r\n                .path(\"id\");\r\n    }\r\n\r\n    @BeforeAll\r\n    public static void setupRestAssured() {\r\n        RestAssured.filters(\r\n                List.of(new RequestLoggingFilter(),\r\n                        new ResponseLoggingFilter()));\r\n\r\n    }\r\n\r\n    @BeforeEach\r\n    public void setupTestData() {\r\n        //Получение токена для админа\r\n        adminToken = given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .body(\"\"\"\r\n                        {\r\n                          \"username\": \"admin\",\r\n                          \"password\": \"admin\"\r\n                        }\r\n                        \"\"\")\r\n                .post(\"http://localhost:4111/api/v1/auth/login\")\r\n                .then()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .extract()\r\n                .header(\"Authorization\");\r\n        //Создание первого пользователя\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", adminToken)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"username\": \"%s\",\r\n                          \"password\": \"Kate012!\",\r\n                          \"role\": \"USER\"\r\n                        }\r\n                        \"\"\", user1Username))\r\n                .post(\"http://localhost:4111/api/v1/admin/users\")\r\n                .then()\r\n                .statusCode(HttpStatus.SC_CREATED);\r\n        //Получение токена для пользователя1\r\n        user1Token = given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"username\": \"%s\",\r\n                          \"password\": \"Kate012!\"\r\n                        }\r\n                        \"\"\", user1Username))\r\n                .post(\"http://localhost:4111/api/v1/auth/login\")\r\n                .then()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .extract()\r\n                .header(\"Authorization\");\r\n        //Create first account for user1\r\n        firstAccountUser1 = createAccount();\r\n    }\r\n\r\n    public static Stream<Arguments> transactionDataForPositiveCaseJson() {\r\n\r\n        return Stream.of(\r\n                Arguments.of(0, 100, 100),\r\n                Arguments.of(100, 200, 300),\r\n                Arguments.of(300, 0.01, 300.01)\r\n        );\r\n    }\r\n\r\n    public static Stream<Arguments> transactionDataForNegativeCase() {\r\n        return Stream.of(\r\n                //Пополнение на ноль\r\n                Arguments.of(0, 0),\r\n                Arguments.of(100, 0),\r\n                //Пополнение на отрицательную сумму\r\n                Arguments.of(0, -100),\r\n                Arguments.of(200, -100)\r\n        );\r\n    }\r\n\r\n    public static Stream<Arguments> notExistOrSomebodyAccount() {\r\n        int randomIdAccount = new Random().nextInt(10000, 1000000);\r\n\r\n        return Stream.of(\r\n                Arguments.of(randomIdAccount)  // ← передаем только ID\r\n        );\r\n    }\r\n\r\n\r\n    @ParameterizedTest\r\n    @DisplayName(\"Успешное пополнение счета первый и последующие разы\")\r\n    @MethodSource(\"transactionDataForPositiveCaseJson\")\r\n    public void userCanDepositAccountTest(double initialBalance, double depositAmount, double expectedBalance) {\r\n\r\n        // 1. Устанавливаем начальный баланс (если нужно)\r\n        if (initialBalance != 0) {\r\n            given()\r\n                    .contentType(ContentType.JSON)\r\n                    .header(\"Authorization\", user1Token)\r\n                    .body(Map.of(\"id\", firstAccountUser1, \"balance\", initialBalance))\r\n                    .post(\"http://localhost:4111/api/v1/accounts/deposit\")\r\n                    .then()\r\n                    .assertThat()\r\n                    .statusCode(HttpStatus.SC_OK);\r\n        }\r\n\r\n        // 2. Делаем депозит\r\n        Float actualBalance = given()\r\n                .contentType(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                .body(Map.of(\"id\", firstAccountUser1, \"balance\", depositAmount)) // ← \"amount\"!\r\n                .post(\"http://localhost:4111/api/v1/accounts/deposit\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .extract()\r\n                .path(\"balance\");\r\n\r\n        // 3. Проверяем итоговый баланс\r\n        assertEquals((float) expectedBalance, actualBalance, 0.01f);\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @DisplayName(\"Пользователь не может пополнить счет на 0 и отрицательную сумму\")\r\n    @MethodSource(\"transactionDataForNegativeCase\")\r\n    public void userCannotDepositAccountTest(double initialBalance, double depositAmount) {\r\n        // 1. Устанавливаем начальный баланс (если нужно)\r\n        if (initialBalance != 0) {\r\n            given()\r\n                    .contentType(ContentType.JSON)\r\n                    .header(\"Authorization\", user1Token)\r\n                    .body(Map.of(\"id\", firstAccountUser1, \"balance\", initialBalance))\r\n                    .post(\"http://localhost:4111/api/v1/accounts/deposit\")\r\n                    .then()\r\n                    .assertThat()\r\n                    .statusCode(HttpStatus.SC_OK);\r\n        }\r\n\r\n        // 2. Делаем депозит\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                .body(Map.of(\"id\", firstAccountUser1, \"balance\", depositAmount)) // ← \"amount\"!\r\n                .post(\"http://localhost:4111/api/v1/accounts/deposit\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_BAD_REQUEST);\r\n\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @DisplayName(\"Пользователь не может пополнить чужой или несуществующий счет\")\r\n    @MethodSource(\"notExistOrSomebodyAccount\")\r\n    public void userCannotDepositNotExistAccountTest(int accountId) {\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                .body(String.format(\"\"\"\r\n        {\r\n          \"id\": %d,\r\n          \"balance\": 100.0\r\n        }\r\n        \"\"\", accountId))\r\n                .post(\"http://localhost:4111/api/v1/accounts/deposit\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_FORBIDDEN);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/iteration_2/DepositAccount.java b/src/test/java/iteration_2/DepositAccount.java
--- a/src/test/java/iteration_2/DepositAccount.java	(revision 394de195a33e63fb29ce625f4d80e4efd0ff331e)
+++ b/src/test/java/iteration_2/DepositAccount.java	(date 1757594599523)
@@ -50,7 +50,7 @@
                         new ResponseLoggingFilter()));
 
     }
-
+//Перед каждым тестом
     @BeforeEach
     public void setupTestData() {
         //Получение токена для админа
