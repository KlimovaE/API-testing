Index: src/test/java/iteration_2/UpdateUserName.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package iteration_2;\r\n\r\nimport io.restassured.RestAssured;\r\nimport io.restassured.filter.log.RequestLoggingFilter;\r\nimport io.restassured.filter.log.ResponseLoggingFilter;\r\nimport io.restassured.http.ContentType;\r\nimport org.apache.http.HttpStatus;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.DisplayName;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.Arguments;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport requests.UpdateCustomerProfile;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Stream;\r\n\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.hamcrest.Matchers.equalTo;\r\n\r\n\r\npublic class UpdateUserName {\r\n    String adminToken;\r\n    String user1Token;\r\n    String user2Token;\r\n    //Генерация уникальных userName для каждого теста\r\n    String user1Username = \"A_\" + System.currentTimeMillis(); // \"kate001_123456\"\r\n    String user2Username = \"B_\" + System.currentTimeMillis(); // \"kate002_123456\"\r\n\r\n    @BeforeAll\r\n    public static void setupRestAssured() {\r\n        RestAssured.filters(\r\n                List.of(new RequestLoggingFilter(),\r\n                        new ResponseLoggingFilter()));\r\n\r\n    }\r\n    @BeforeEach\r\n    public void setupTestData() {\r\n        //Получение токена для админа\r\n        adminToken = given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .body(\"\"\"\r\n                        {\r\n                          \"username\": \"admin\",\r\n                          \"password\": \"admin\"\r\n                        }\r\n                        \"\"\")\r\n                .post(\"http://localhost:4111/api/v1/auth/login\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .extract()\r\n                .header(\"Authorization\");\r\n        //Создание первого пользователя\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", adminToken)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"username\": \"%s\",\r\n                          \"password\": \"Kate012!\",\r\n                          \"role\": \"USER\"\r\n                        }\r\n                        \"\"\", user1Username))\r\n                .post(\"http://localhost:4111/api/v1/admin/users\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_CREATED);\r\n        //Создание второго пользователя\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", adminToken)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"username\": \"%s\",\r\n                          \"password\": \"Kate013!\",\r\n                          \"role\": \"USER\"\r\n                        }\r\n                        \"\"\", user2Username))\r\n                .post(\"http://localhost:4111/api/v1/admin/users\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_CREATED);\r\n        //Получение токена для пользователя1\r\n        user1Token = given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"username\": \"%s\",\r\n                          \"password\": \"Kate012!\"\r\n                        }\r\n                        \"\"\", user1Username))\r\n                .post(\"http://localhost:4111/api/v1/auth/login\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .extract()\r\n                .header(\"Authorization\");\r\n        //Получение токена для пользователя2\r\n        user2Token = given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"username\": \"%s\",\r\n                          \"password\": \"Kate013!\"\r\n                        }\r\n                        \"\"\", user2Username))\r\n                .post(\"http://localhost:4111/api/v1/auth/login\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .extract()\r\n                .header(\"Authorization\");\r\n    }\r\n\r\n    public static Stream<Arguments> validNameData() {\r\n        return Stream.of(\r\n                //Update name from null (null->kate)\r\n                Arguments.of(null, \"Kate\"),\r\n                //Update user's name to another valid name (kate->kat\r\n                Arguments.of(\"Kate\", \"Kat\"),\r\n                //Update name to duplicate name(kat->kat)\r\n                Arguments.of(\"Kat\", \"Kat\"),\r\n                //Update name - use all type symbols(kat->Kate 1234567890:%;№\"!?*()+=,/\\'<>.-_)\r\n                Arguments.of(\"Kat\", \"Kate 1234567890:%;№!?*()+=,/'<>.-_\")\r\n        );\r\n    }\r\n\r\n    public static Stream<Arguments> nameDataForCornerCases() {\r\n        return Stream.of(\r\n                //only special symbols\r\n                Arguments.of(\"-:%;№!?*()+=,/\\\"'<>.-_\"),\r\n                //only numbers\r\n                Arguments.of(\"1234567890\")\r\n        );\r\n    }\r\n\r\n    public static Stream<Arguments> nameDataForNegativeCases() {\r\n        return Stream.of(\r\n                //only special symbols\r\n                Arguments.of(\"\"),\r\n                //only numbers\r\n                Arguments.of(\"   \")\r\n        );\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"validNameData\")\r\n    @DisplayName(\"Пользователь может изменить имя с null и с другого значения\")\r\n    public void userCanUpdateNameTest(String initialName, String newName) {\r\n        // Если initialName не null, сначала устанавливаем его\r\n        if (initialName != null) {\r\n            given()\r\n                    .contentType(ContentType.JSON)\r\n                    .accept(ContentType.JSON)\r\n                    .header(\"Authorization\", user1Token)\r\n                    .body(String.format(\"\"\"\r\n                        {\r\n                          \"name\": \"%s\"\r\n                        }\r\n                        \"\"\", initialName))\r\n                    .put(\"http://localhost:4111/api/v1/customer/profile\")\r\n                    .then()\r\n                    .assertThat()\r\n                    .statusCode(HttpStatus.SC_OK)\r\n                    .body(\"customer.name\", equalTo(initialName));\r\n\r\n        }\r\n\r\n        // Теперь меняем имя на новое\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"name\": \"%s\"\r\n                        }\r\n                        \"\"\", newName))\r\n                .put(\"http://localhost:4111/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .body(\"customer.name\", equalTo(newName));\r\n    }\r\n    @Test\r\n    @DisplayName(\"Пользователь может изменить себе имя на имя у другого пользователя\")\r\n    public void userCanUpdateNameToNameAnotherUserTest() {\r\n        String duplicateName = \"UserKate\";\r\n        // Задаем имя первому пользователю\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"name\": \"%s\"\r\n                        }\r\n                        \"\"\", duplicateName))\r\n                .put(\"http://localhost:4111/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .body(\"customer.name\", equalTo(duplicateName));\r\n\r\n        // Задаем имя первого пользователя второму\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", user2Token)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                          \"name\": \"%s\"\r\n                        }\r\n                        \"\"\", duplicateName))\r\n                .put(\"http://localhost:4111/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .body(\"customer.name\", equalTo(duplicateName));\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"nameDataForCornerCases\")\r\n    @DisplayName(\"Пользователь может изменить имя на значение только из символов или чисел\")\r\n    public void useOnlySpecialSymbolsOrNumbersForNameTest(String newName) {\r\n        UpdateCustomerProfile updateCustomerProfile = UpdateCustomerProfile.\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                //Вручную: JSON валиден, кавычки правильно экранированы\r\n                //В тесте: String.format() может некорректно обработать \\\" и ' в строке\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                        \"name\":\"%s\"\r\n                        }\r\n                        \"\"\", newName.replace(\"\\\"\", \"\\\\\\\"\")))// ← Экранируем кавычки!\r\n                .put(\"http://localhost:4111/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .body(\"customer.name\", equalTo(newName));\r\n\r\n    }\r\n    @ParameterizedTest\r\n    @MethodSource(\"nameDataForNegativeCases\")\r\n    @DisplayName(\"Пользователь не может изменить имя на невалидное значение(пустое, только пробелы)\")\r\n    public void userCannotUpdateNameWithInvalidValue(String newName) {\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                        \"name\":\"%s\"\r\n                        }\r\n                        \"\"\", newName))\r\n                .put(\"http://localhost:4111/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_BAD_REQUEST);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/iteration_2/UpdateUserName.java b/src/test/java/iteration_2/UpdateUserName.java
--- a/src/test/java/iteration_2/UpdateUserName.java	(revision e634bdb8254632e59041c545de1d9d8518cc6af4)
+++ b/src/test/java/iteration_2/UpdateUserName.java	(date 1757591397675)
@@ -12,7 +12,6 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
-import requests.UpdateCustomerProfile;
 
 import java.util.List;
 import java.util.stream.Stream;
@@ -36,6 +35,7 @@
                         new ResponseLoggingFilter()));
 
     }
+
     @BeforeEach
     public void setupTestData() {
         //Получение токена для админа
@@ -162,10 +162,10 @@
                     .accept(ContentType.JSON)
                     .header("Authorization", user1Token)
                     .body(String.format("""
-                        {
-                          "name": "%s"
-                        }
-                        """, initialName))
+                            {
+                              "name": "%s"
+                            }
+                            """, initialName))
                     .put("http://localhost:4111/api/v1/customer/profile")
                     .then()
                     .assertThat()
@@ -190,6 +190,7 @@
                 .statusCode(HttpStatus.SC_OK)
                 .body("customer.name", equalTo(newName));
     }
+
     @Test
     @DisplayName("Пользователь может изменить себе имя на имя у другого пользователя")
     public void userCanUpdateNameToNameAnotherUserTest() {
@@ -231,7 +232,7 @@
     @MethodSource("nameDataForCornerCases")
     @DisplayName("Пользователь может изменить имя на значение только из символов или чисел")
     public void useOnlySpecialSymbolsOrNumbersForNameTest(String newName) {
-        UpdateCustomerProfile updateCustomerProfile = UpdateCustomerProfile.
+
         given()
                 .contentType(ContentType.JSON)
                 .accept(ContentType.JSON)
@@ -250,6 +251,7 @@
                 .body("customer.name", equalTo(newName));
 
     }
+
     @ParameterizedTest
     @MethodSource("nameDataForNegativeCases")
     @DisplayName("Пользователь не может изменить имя на невалидное значение(пустое, только пробелы)")
