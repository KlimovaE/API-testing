Index: src/main/java/spec/ResponseSpecs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spec;\r\n\r\nimport io.restassured.builder.ResponseSpecBuilder;\r\nimport io.restassured.specification.ResponseSpecification;\r\nimport org.apache.http.HttpStatus;\r\n\r\nimport static org.hamcrest.Matchers.equalTo;\r\n\r\npublic class ResponseSpecs {\r\n    private ResponseSpecs() {\r\n    }\r\n\r\n    private static ResponseSpecBuilder defaultResponseBuilder() {\r\n        return new ResponseSpecBuilder();\r\n    }\r\n\r\n    public static ResponseSpecification entityWasCreated() {\r\n        return defaultResponseBuilder()\r\n                .expectStatusCode(HttpStatus.SC_CREATED)\r\n                .build();\r\n    }\r\n\r\n    public static ResponseSpecification requestReturnsOK() {\r\n        return defaultResponseBuilder()\r\n                .expectStatusCode(HttpStatus.SC_OK)\r\n                .build();\r\n    }\r\n\r\n    public static ResponseSpecification requestReturnOkAndCheckNewName(String newName) {\r\n        return defaultResponseBuilder()\r\n                .expectStatusCode(HttpStatus.SC_OK)\r\n                .expectBody(\"customer.name\", equalTo(newName))\r\n                .build();\r\n    }\r\n\r\n    public static ResponseSpecification requestReturnsBadRequest() {\r\n        return ResponseSpecs.defaultResponseBuilder()\r\n                .expectStatusCode(HttpStatus.SC_BAD_REQUEST)\r\n                .build();\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/spec/ResponseSpecs.java b/src/main/java/spec/ResponseSpecs.java
--- a/src/main/java/spec/ResponseSpecs.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/spec/ResponseSpecs.java	(date 1757597253938)
@@ -4,8 +4,6 @@
 import io.restassured.specification.ResponseSpecification;
 import org.apache.http.HttpStatus;
 
-import static org.hamcrest.Matchers.equalTo;
-
 public class ResponseSpecs {
     private ResponseSpecs() {
     }
@@ -19,23 +17,9 @@
                 .expectStatusCode(HttpStatus.SC_CREATED)
                 .build();
     }
-
     public static ResponseSpecification requestReturnsOK() {
         return defaultResponseBuilder()
                 .expectStatusCode(HttpStatus.SC_OK)
                 .build();
     }
-
-    public static ResponseSpecification requestReturnOkAndCheckNewName(String newName) {
-        return defaultResponseBuilder()
-                .expectStatusCode(HttpStatus.SC_OK)
-                .expectBody("customer.name", equalTo(newName))
-                .build();
-    }
-
-    public static ResponseSpecification requestReturnsBadRequest() {
-        return ResponseSpecs.defaultResponseBuilder()
-                .expectStatusCode(HttpStatus.SC_BAD_REQUEST)
-                .build();
-    }
 }
Index: src/main/java/requests/UpdateCustomerProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package requests;\r\n\r\nimport io.restassured.response.ValidatableResponse;\r\nimport io.restassured.specification.RequestSpecification;\r\nimport io.restassured.specification.ResponseSpecification;\r\nimport models.UpdateCustomerProfileRequest;\r\nimport spec.ResponseSpecs;\r\n\r\nimport static io.restassured.RestAssured.given;\r\n\r\npublic class UpdateCustomerProfile extends PutRequest<UpdateCustomerProfileRequest> {\r\n\r\n    // Конструктор без параметров для ResponseSpecification\r\n    public UpdateCustomerProfile(RequestSpecification requestSpecification, ResponseSpecification responseSpecification) {\r\n        super(requestSpecification, responseSpecification);\r\n    }\r\n\r\n    // Конструктор С параметрами для динамических проверок\r\n    public UpdateCustomerProfile(RequestSpecification requestSpec, String expectedName) {\r\n        super(requestSpec, ResponseSpecs.requestReturnOkAndCheckNewName(expectedName));\r\n    }\r\n\r\n    // Реализация PUT (основной метод для обновления профиля)\r\n    @Override\r\n    public ValidatableResponse put(UpdateCustomerProfileRequest model) {\r\n        return given()\r\n                .spec(requestSpecification)\r\n                .body(model)\r\n                .put(\"/api/v1/customer/profile\")  // PUT запрос\r\n                .then()\r\n                .spec(responseSpecification);\r\n    }\r\n\r\n    // Дополнительный метод PUT с кастомной проверкой\r\n    public ValidatableResponse put(UpdateCustomerProfileRequest model, String expectedName) {\r\n        return given()\r\n                .spec(requestSpecification)\r\n                .body(model)\r\n                .put(\"/api/v1/customer/profile\")\r\n                .then()\r\n                .spec(ResponseSpecs.requestReturnOkAndCheckNewName(expectedName));\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/requests/UpdateCustomerProfile.java b/src/main/java/requests/UpdateCustomerProfile.java
--- a/src/main/java/requests/UpdateCustomerProfile.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/requests/UpdateCustomerProfile.java	(date 1757597254323)
@@ -3,43 +3,26 @@
 import io.restassured.response.ValidatableResponse;
 import io.restassured.specification.RequestSpecification;
 import io.restassured.specification.ResponseSpecification;
-import models.UpdateCustomerProfileRequest;
-import spec.ResponseSpecs;
+import models.BaseModel;
 
 import static io.restassured.RestAssured.given;
 
-public class UpdateCustomerProfile extends PutRequest<UpdateCustomerProfileRequest> {
+public class UpdateCustomerProfile extends Request {
 
-    // Конструктор без параметров для ResponseSpecification
+
     public UpdateCustomerProfile(RequestSpecification requestSpecification, ResponseSpecification responseSpecification) {
         super(requestSpecification, responseSpecification);
     }
 
-    // Конструктор С параметрами для динамических проверок
-    public UpdateCustomerProfile(RequestSpecification requestSpec, String expectedName) {
-        super(requestSpec, ResponseSpecs.requestReturnOkAndCheckNewName(expectedName));
-    }
-
-    // Реализация PUT (основной метод для обновления профиля)
     @Override
-    public ValidatableResponse put(UpdateCustomerProfileRequest model) {
+    public ValidatableResponse post(BaseModel model) {
         return given()
                 .spec(requestSpecification)
                 .body(model)
-                .put("/api/v1/customer/profile")  // PUT запрос
+                .post("/api/v1/customer/profile")
                 .then()
+                .assertThat()
                 .spec(responseSpecification);
-    }
 
-    // Дополнительный метод PUT с кастомной проверкой
-    public ValidatableResponse put(UpdateCustomerProfileRequest model, String expectedName) {
-        return given()
-                .spec(requestSpecification)
-                .body(model)
-                .put("/api/v1/customer/profile")
-                .then()
-                .spec(ResponseSpecs.requestReturnOkAndCheckNewName(expectedName));
     }
-
-
 }
Index: src/main/java/requests/CreateUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package requests;\r\n\r\nimport io.restassured.response.ValidatableResponse;\r\nimport io.restassured.specification.RequestSpecification;\r\nimport io.restassured.specification.ResponseSpecification;\r\nimport models.CreateUserRequest;\r\n\r\nimport static io.restassured.RestAssured.given;\r\n\r\npublic class CreateUser extends PostRequest<CreateUserRequest> {\r\n\r\n    public CreateUser(RequestSpecification requestSpecification, ResponseSpecification responseSpecification) {\r\n        super(requestSpecification, responseSpecification);\r\n    }\r\n\r\n\r\n    @Override\r\n    public ValidatableResponse post(CreateUserRequest model) {\r\n        return given()\r\n                .spec(requestSpecification)\r\n                .body(model)\r\n                .post(\"/api/v1/admin/users\")\r\n                .then()\r\n                .assertThat()\r\n                .spec(responseSpecification);\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/requests/CreateUser.java b/src/main/java/requests/CreateUser.java
--- a/src/main/java/requests/CreateUser.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/requests/CreateUser.java	(date 1757597240596)
@@ -7,13 +7,11 @@
 
 import static io.restassured.RestAssured.given;
 
-public class CreateUser extends PostRequest<CreateUserRequest> {
 
     public CreateUser(RequestSpecification requestSpecification, ResponseSpecification responseSpecification) {
         super(requestSpecification, responseSpecification);
     }
 
-
     @Override
     public ValidatableResponse post(CreateUserRequest model) {
         return given()
Index: src/main/java/spec/RequestSpecs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spec;\r\n\r\nimport io.restassured.builder.RequestSpecBuilder;\r\nimport io.restassured.filter.log.RequestLoggingFilter;\r\nimport io.restassured.filter.log.ResponseLoggingFilter;\r\nimport io.restassured.http.ContentType;\r\nimport io.restassured.specification.RequestSpecification;\r\n\r\nimport java.util.List;\r\n\r\npublic class RequestSpecs {\r\n    private RequestSpecs() {\r\n    }\r\n\r\n    private static RequestSpecBuilder defaultRequestBuilder() {\r\n        return new RequestSpecBuilder()\r\n                .setContentType(ContentType.JSON)\r\n                .setAccept(ContentType.JSON)\r\n                .addFilters(List.of(new RequestLoggingFilter(),\r\n                        new ResponseLoggingFilter()))\r\n                .setBaseUri(\"http://localhost:4111\");\r\n    }\r\n\r\n    public static RequestSpecification unAuthSpec() {\r\n        return defaultRequestBuilder().build();\r\n    }\r\n\r\n    public static RequestSpecification adminAuthSpec() {\r\n        return defaultRequestBuilder()\r\n                .addHeader(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")\r\n                .build();\r\n    }\r\n\r\n    public static RequestSpecification userAuthSpec(String token) {\r\n        return defaultRequestBuilder()\r\n                .addHeader(\"Authorization\", token)\r\n                .build();\r\n\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/spec/RequestSpecs.java b/src/main/java/spec/RequestSpecs.java
--- a/src/main/java/spec/RequestSpecs.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/spec/RequestSpecs.java	(date 1757597253113)
@@ -31,10 +31,8 @@
                 .build();
     }
 
-    public static RequestSpecification userAuthSpec(String token) {
+    public static RequestSpecBuilder userAuthSpec(String token) {
         return defaultRequestBuilder()
-                .addHeader("Authorization", token)
-                .build();
-
+                .addHeader("Authorization", token);
     }
 }
Index: src/main/java/requests/UserDepositAccount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package requests;\r\n\r\nimport io.restassured.response.ValidatableResponse;\r\nimport io.restassured.specification.RequestSpecification;\r\nimport io.restassured.specification.ResponseSpecification;\r\nimport models.DepositAccountRequest;\r\n\r\nimport static io.restassured.RestAssured.given;\r\n\r\npublic class UserDepositAccount extends PostRequest<DepositAccountRequest<Double>> {\r\n    public UserDepositAccount(RequestSpecification requestSpecification, ResponseSpecification responseSpecification) {\r\n        super(requestSpecification, responseSpecification);\r\n    }\r\n\r\n    @Override\r\n    public ValidatableResponse post(DepositAccountRequest<Double> model) {\r\n    return given()\r\n            .spec(requestSpecification)\r\n            .body(model)\r\n            .post(\"/api/v1/accounts/deposit\")\r\n            .then()\r\n            .assertThat()\r\n            .spec(responseSpecification);\r\n}\r\n}\r\n
===================================================================
diff --git a/src/main/java/requests/UserDepositAccount.java b/src/main/java/requests/UserDepositAccount.java
--- a/src/main/java/requests/UserDepositAccount.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/requests/UserDepositAccount.java	(date 1757597256928)
@@ -3,17 +3,17 @@
 import io.restassured.response.ValidatableResponse;
 import io.restassured.specification.RequestSpecification;
 import io.restassured.specification.ResponseSpecification;
-import models.DepositAccountRequest;
+import models.BaseModel;
 
 import static io.restassured.RestAssured.given;
 
-public class UserDepositAccount extends PostRequest<DepositAccountRequest<Double>> {
+public class UserDepositAccount extends Request{
     public UserDepositAccount(RequestSpecification requestSpecification, ResponseSpecification responseSpecification) {
         super(requestSpecification, responseSpecification);
     }
 
     @Override
-    public ValidatableResponse post(DepositAccountRequest<Double> model) {
+    public ValidatableResponse post(BaseModel model) {
     return given()
             .spec(requestSpecification)
             .body(model)
Index: src/main/java/models/DepositAccountRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\npublic class DepositAccountRequest <T extends Number> extends BaseModel{\r\n    private long id;\r\n    private T balance;\r\n}\r\n
===================================================================
diff --git a/src/main/java/models/DepositAccountRequest.java b/src/main/java/models/DepositAccountRequest.java
--- a/src/main/java/models/DepositAccountRequest.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/models/DepositAccountRequest.java	(date 1757597258485)
@@ -9,7 +9,7 @@
 @AllArgsConstructor
 @NoArgsConstructor
 @Builder
-public class DepositAccountRequest <T extends Number> extends BaseModel{
+public class DepositAccountRequest <T extends Number>{
     private long id;
     private T balance;
 }
Index: src/main/java/models/DepositAccountResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.List;\r\n\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\npublic class DepositAccountResponse <T extends Number> extends BaseModel {\r\n    private long id;\r\n    private String accountNumber;\r\n    private T balance;\r\n    private List<Transaction> transactions;\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/models/DepositAccountResponse.java b/src/main/java/models/DepositAccountResponse.java
--- a/src/main/java/models/DepositAccountResponse.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/models/DepositAccountResponse.java	(date 1757597250476)
@@ -12,7 +12,7 @@
 @AllArgsConstructor
 @NoArgsConstructor
 @Builder
-public class DepositAccountResponse <T extends Number> extends BaseModel {
+public class DepositAccountResponse <T extends Number> {
     private long id;
     private String accountNumber;
     private T balance;
Index: src/main/java/models/UpdateCustomerProfileResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.List;\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\npublic class UpdateCustomerProfileResponse extends BaseModel {\r\n\r\n    private long id;\r\n    private String username;\r\n    private String password;\r\n    private String role;\r\n    private List<String> accounts;\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/models/UpdateCustomerProfileResponse.java b/src/main/java/models/UpdateCustomerProfileResponse.java
--- a/src/main/java/models/UpdateCustomerProfileResponse.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/models/UpdateCustomerProfileResponse.java	(date 1757597255277)
@@ -11,7 +11,7 @@
 @AllArgsConstructor
 @NoArgsConstructor
 @Builder
-public class UpdateCustomerProfileResponse extends BaseModel {
+public class UpdateCustomerProfileResponse {
 
     private long id;
     private String username;
Index: src/main/java/requests/AdminLoginUserRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package requests;\r\n\r\nimport io.restassured.response.ValidatableResponse;\r\nimport io.restassured.specification.RequestSpecification;\r\nimport io.restassured.specification.ResponseSpecification;\r\nimport models.LoginUserRequest;\r\n\r\nimport static io.restassured.RestAssured.given;\r\n\r\npublic class AdminLoginUserRequest extends PostRequest<LoginUserRequest> {\r\n    public AdminLoginUserRequest(RequestSpecification requestSpecification, ResponseSpecification responseSpecification) {\r\n        super(requestSpecification, responseSpecification);\r\n    }\r\n\r\n    @Override\r\n    public ValidatableResponse post(LoginUserRequest model) {\r\n        return given()\r\n                .spec(requestSpecification)\r\n                .body(model)\r\n                .post(\"/api/v1/auth/login\")\r\n                .then()\r\n                .spec(responseSpecification);\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/requests/AdminLoginUserRequest.java b/src/main/java/requests/AdminLoginUserRequest.java
--- a/src/main/java/requests/AdminLoginUserRequest.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/requests/AdminLoginUserRequest.java	(date 1757597233229)
@@ -7,7 +7,7 @@
 
 import static io.restassured.RestAssured.given;
 
-public class AdminLoginUserRequest extends PostRequest<LoginUserRequest> {
+public class AdminLoginUserRequest extends Request<LoginUserRequest> {
     public AdminLoginUserRequest(RequestSpecification requestSpecification, ResponseSpecification responseSpecification) {
         super(requestSpecification, responseSpecification);
     }
Index: src/test/java/iteration_2/UpdateUserName.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package iteration_2;\r\n\r\nimport io.restassured.http.ContentType;\r\nimport models.CreateUserRequest;\r\nimport models.LoginUserRequest;\r\nimport models.UpdateCustomerProfileRequest;\r\nimport org.apache.http.HttpStatus;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.DisplayName;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.Arguments;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport requests.AdminLoginUserRequest;\r\nimport requests.CreateUser;\r\nimport requests.UpdateCustomerProfile;\r\nimport spec.RequestSpecs;\r\nimport spec.ResponseSpecs;\r\n\r\nimport java.util.stream.Stream;\r\n\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.hamcrest.Matchers.equalTo;\r\n\r\n\r\npublic class UpdateUserName {\r\n    String adminToken = \"Basic YWRtaW46YWRtaW4=\";\r\n    String user1Token;\r\n    String user2Token;\r\n    String user1Password = \"Kate012!\";\r\n    String user2Password = \"Kate013!\";\r\n    //Генерация уникальных userName для каждого теста\r\n    String user1Username = \"A_\" + System.currentTimeMillis(); // \"kate001_123456\"\r\n    String user2Username = \"B_\" + System.currentTimeMillis(); // \"kate002_123456\"\r\n    String userRole = \"USER\";\r\n\r\n\r\n    @BeforeEach\r\n    public void setupTestData() {\r\n        //создание первого пользователя(middle)\r\n        CreateUserRequest userRequest = CreateUserRequest.builder().\r\n                username(user1Username)\r\n                .password(user1Password)\r\n                .role(userRole)\r\n                .build();\r\n        new CreateUser(RequestSpecs.adminAuthSpec(), ResponseSpecs.entityWasCreated())\r\n                .post(userRequest);\r\n\r\n        //Создание второго пользователя\r\n        CreateUserRequest userRequest2 = CreateUserRequest.builder()\r\n                .username(user2Username)\r\n                .password(user2Password)\r\n                .role(userRole)\r\n                .build();\r\n        new CreateUser(RequestSpecs.adminAuthSpec(), ResponseSpecs.entityWasCreated())\r\n                .post(userRequest2);\r\n\r\n        //Получение токена для пользователя1\r\n        LoginUserRequest loginUser1Request = LoginUserRequest.builder()\r\n                .username(user1Username)\r\n                .password(user1Password)\r\n                .build();\r\n        user1Token = new AdminLoginUserRequest(RequestSpecs.unAuthSpec(), ResponseSpecs.requestReturnsOK())\r\n                .post(loginUser1Request)\r\n                .extract()\r\n                .header(\"Authorization\");\r\n\r\n        //Получение токена для пользователя2\r\n        LoginUserRequest loginUser2Request = LoginUserRequest.builder()\r\n                .username(user2Username)\r\n                .password(user2Password)\r\n                .build();\r\n\r\n        user2Token = new AdminLoginUserRequest(RequestSpecs.unAuthSpec(), ResponseSpecs.requestReturnsOK())\r\n                .post(loginUser2Request)\r\n                .extract()\r\n                .header(\"Authorization\");\r\n    }\r\n\r\n    public static Stream<Arguments> validNameData() {\r\n        return Stream.of(\r\n                //Update name from null (null->kate)\r\n                Arguments.of(null, \"Kate\"),\r\n                //Update user's name to another valid name (kate->kat\r\n                Arguments.of(\"Kate\", \"Kat\"),\r\n                //Update name to duplicate name(kat->kat)\r\n                Arguments.of(\"Kat\", \"Kat\"),\r\n                //Update name - use all type symbols(kat->Kate 1234567890:%;№\"!?*()+=,/\\'<>.-_)\r\n                Arguments.of(\"Kat\", \"Kate 1234567890:%;№!?*()+=,/'<>.-_\")\r\n        );\r\n    }\r\n\r\n    public static Stream<Arguments> nameDataForCornerCases() {\r\n        return Stream.of(\r\n                //only special symbols\r\n                Arguments.of(\"-:%;№!?*()+=,/\\\"'<>.-_\"),\r\n                //only numbers\r\n                Arguments.of(\"1234567890\")\r\n        );\r\n    }\r\n\r\n    public static Stream<Arguments> nameDataForNegativeCases() {\r\n        return Stream.of(\r\n                //only special symbols\r\n                Arguments.of(\"\"),\r\n                //only numbers\r\n                Arguments.of(\"   \")\r\n        );\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"validNameData\")\r\n    @DisplayName(\"Пользователь может изменить имя с null и с другого значения\")\r\n    public void userCanUpdateNameTest(String initialName, String newName) {\r\n        // Если initialName не null, сначала устанавливаем его\r\n        if (initialName != null) {\r\n            //передаем в json initialName\r\n            UpdateCustomerProfileRequest updateUser1 = UpdateCustomerProfileRequest.builder()\r\n                    .name(initialName)\r\n                    .build();\r\n            new UpdateCustomerProfile(RequestSpecs.userAuthSpec(user1Token), initialName)\r\n                    .put(updateUser1);\r\n\r\n            given()\r\n                    .spec(RequestSpecs.userAuthSpec(user1Token))\r\n                    .body(updateUser1)\r\n                    .put(\"/api/v1/customer/profile\")\r\n                    .then()\r\n                    .assertThat()\r\n                    .spec(ResponseSpecs.requestReturnOkAndCheckNewName(initialName));\r\n\r\n        }\r\n\r\n        // Теперь меняем имя на новое\r\n        UpdateCustomerProfileRequest updateUser1 = UpdateCustomerProfileRequest.builder()\r\n                .name(newName)\r\n                .build();\r\n        new UpdateCustomerProfile(RequestSpecs.userAuthSpec(user1Token), newName)\r\n        .put(updateUser1);\r\n\r\n        given()\r\n                .spec(RequestSpecs.userAuthSpec(user1Token))\r\n                .body(updateUser1)\r\n                .put(\"/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .spec(ResponseSpecs.requestReturnOkAndCheckNewName(newName));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Пользователь может изменить себе имя на имя у другого пользователя\")\r\n    public void userCanUpdateNameToNameAnotherUserTest() {\r\n        String duplicateName = \"UserKate\";\r\n        // Задаем имя первому пользователю\r\n        UpdateCustomerProfileRequest user1update = UpdateCustomerProfileRequest.builder()\r\n                .name(duplicateName)\r\n                .build();\r\n        given()\r\n                .spec(RequestSpecs.userAuthSpec(user1Token))\r\n                .body(user1update)\r\n                .put(\"/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .spec(ResponseSpecs.requestReturnOkAndCheckNewName(duplicateName));\r\n\r\n        // Задаем имя первого пользователя второму\r\n        UpdateCustomerProfileRequest user2update = UpdateCustomerProfileRequest.builder()\r\n                .name(duplicateName)\r\n                .build();\r\n        given()\r\n                .spec(RequestSpecs.userAuthSpec(user2Token))\r\n                .body(user1update)\r\n                .put(\"/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .spec(ResponseSpecs.requestReturnOkAndCheckNewName(duplicateName));\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"nameDataForCornerCases\")\r\n    @DisplayName(\"Пользователь может изменить имя на значение только из символов или чисел\")\r\n    public void useOnlySpecialSymbolsOrNumbersForNameTest(String newName) {\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n                .accept(ContentType.JSON)\r\n                .header(\"Authorization\", user1Token)\r\n                //Вручную: JSON валиден, кавычки правильно экранированы\r\n                //В тесте: String.format() может некорректно обработать \\\" и ' в строке\r\n                .body(String.format(\"\"\"\r\n                        {\r\n                        \"name\":\"%s\"\r\n                        }\r\n                        \"\"\", newName.replace(\"\\\"\", \"\\\\\\\"\")))// ← Экранируем кавычки!\r\n                .put(\"http://localhost:4111/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .statusCode(HttpStatus.SC_OK)\r\n                .body(\"customer.name\", equalTo(newName));\r\n\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"nameDataForNegativeCases\")\r\n    @DisplayName(\"Пользователь не может изменить имя на невалидное значение(пустое, только пробелы)\")\r\n    public void userCannotUpdateNameWithInvalidValue(String newName) {\r\n        UpdateCustomerProfileRequest user1update = UpdateCustomerProfileRequest.builder()\r\n                .name(newName)\r\n                .build();\r\n        given()\r\n                .spec(RequestSpecs.userAuthSpec(user1Token))\r\n                .body(user1update)\r\n                .put(\"/api/v1/customer/profile\")\r\n                .then()\r\n                .assertThat()\r\n                .spec(ResponseSpecs.requestReturnsBadRequest());\r\n    }\r\n\r\n}
===================================================================
diff --git a/src/test/java/iteration_2/UpdateUserName.java b/src/test/java/iteration_2/UpdateUserName.java
--- a/src/test/java/iteration_2/UpdateUserName.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/test/java/iteration_2/UpdateUserName.java	(date 1757597256006)
@@ -1,22 +1,20 @@
 package iteration_2;
 
+import io.restassured.RestAssured;
+import io.restassured.filter.log.RequestLoggingFilter;
+import io.restassured.filter.log.ResponseLoggingFilter;
 import io.restassured.http.ContentType;
-import models.CreateUserRequest;
-import models.LoginUserRequest;
-import models.UpdateCustomerProfileRequest;
 import org.apache.http.HttpStatus;
+import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
-import requests.AdminLoginUserRequest;
-import requests.CreateUser;
 import requests.UpdateCustomerProfile;
-import spec.RequestSpecs;
-import spec.ResponseSpecs;
 
+import java.util.List;
 import java.util.stream.Stream;
 
 import static io.restassured.RestAssured.given;
@@ -24,55 +22,100 @@
 
 
 public class UpdateUserName {
-    String adminToken = "Basic YWRtaW46YWRtaW4=";
+    String adminToken;
     String user1Token;
     String user2Token;
-    String user1Password = "Kate012!";
-    String user2Password = "Kate013!";
     //Генерация уникальных userName для каждого теста
     String user1Username = "A_" + System.currentTimeMillis(); // "kate001_123456"
     String user2Username = "B_" + System.currentTimeMillis(); // "kate002_123456"
-    String userRole = "USER";
 
+    @BeforeAll
+    public static void setupRestAssured() {
+        RestAssured.filters(
+                List.of(new RequestLoggingFilter(),
+                        new ResponseLoggingFilter()));
 
+    }
     @BeforeEach
     public void setupTestData() {
-        //создание первого пользователя(middle)
-        CreateUserRequest userRequest = CreateUserRequest.builder().
-                username(user1Username)
-                .password(user1Password)
-                .role(userRole)
-                .build();
-        new CreateUser(RequestSpecs.adminAuthSpec(), ResponseSpecs.entityWasCreated())
-                .post(userRequest);
-
+        //Получение токена для админа
+        adminToken = given()
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .body("""
+                        {
+                          "username": "admin",
+                          "password": "admin"
+                        }
+                        """)
+                .post("http://localhost:4111/api/v1/auth/login")
+                .then()
+                .assertThat()
+                .statusCode(HttpStatus.SC_OK)
+                .extract()
+                .header("Authorization");
+        //Создание первого пользователя
+        given()
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .header("Authorization", adminToken)
+                .body(String.format("""
+                        {
+                          "username": "%s",
+                          "password": "Kate012!",
+                          "role": "USER"
+                        }
+                        """, user1Username))
+                .post("http://localhost:4111/api/v1/admin/users")
+                .then()
+                .assertThat()
+                .statusCode(HttpStatus.SC_CREATED);
         //Создание второго пользователя
-        CreateUserRequest userRequest2 = CreateUserRequest.builder()
-                .username(user2Username)
-                .password(user2Password)
-                .role(userRole)
-                .build();
-        new CreateUser(RequestSpecs.adminAuthSpec(), ResponseSpecs.entityWasCreated())
-                .post(userRequest2);
-
+        given()
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .header("Authorization", adminToken)
+                .body(String.format("""
+                        {
+                          "username": "%s",
+                          "password": "Kate013!",
+                          "role": "USER"
+                        }
+                        """, user2Username))
+                .post("http://localhost:4111/api/v1/admin/users")
+                .then()
+                .assertThat()
+                .statusCode(HttpStatus.SC_CREATED);
         //Получение токена для пользователя1
-        LoginUserRequest loginUser1Request = LoginUserRequest.builder()
-                .username(user1Username)
-                .password(user1Password)
-                .build();
-        user1Token = new AdminLoginUserRequest(RequestSpecs.unAuthSpec(), ResponseSpecs.requestReturnsOK())
-                .post(loginUser1Request)
+        user1Token = given()
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .body(String.format("""
+                        {
+                          "username": "%s",
+                          "password": "Kate012!"
+                        }
+                        """, user1Username))
+                .post("http://localhost:4111/api/v1/auth/login")
+                .then()
+                .assertThat()
+                .statusCode(HttpStatus.SC_OK)
                 .extract()
                 .header("Authorization");
-
         //Получение токена для пользователя2
-        LoginUserRequest loginUser2Request = LoginUserRequest.builder()
-                .username(user2Username)
-                .password(user2Password)
-                .build();
-
-        user2Token = new AdminLoginUserRequest(RequestSpecs.unAuthSpec(), ResponseSpecs.requestReturnsOK())
-                .post(loginUser2Request)
+        user2Token = given()
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .body(String.format("""
+                        {
+                          "username": "%s",
+                          "password": "Kate013!"
+                        }
+                        """, user2Username))
+                .post("http://localhost:4111/api/v1/auth/login")
+                .then()
+                .assertThat()
+                .statusCode(HttpStatus.SC_OK)
                 .extract()
                 .header("Authorization");
     }
@@ -114,72 +157,81 @@
     public void userCanUpdateNameTest(String initialName, String newName) {
         // Если initialName не null, сначала устанавливаем его
         if (initialName != null) {
-            //передаем в json initialName
-            UpdateCustomerProfileRequest updateUser1 = UpdateCustomerProfileRequest.builder()
-                    .name(initialName)
-                    .build();
-            new UpdateCustomerProfile(RequestSpecs.userAuthSpec(user1Token), initialName)
-                    .put(updateUser1);
-
             given()
-                    .spec(RequestSpecs.userAuthSpec(user1Token))
-                    .body(updateUser1)
-                    .put("/api/v1/customer/profile")
+                    .contentType(ContentType.JSON)
+                    .accept(ContentType.JSON)
+                    .header("Authorization", user1Token)
+                    .body(String.format("""
+                        {
+                          "name": "%s"
+                        }
+                        """, initialName))
+                    .put("http://localhost:4111/api/v1/customer/profile")
                     .then()
                     .assertThat()
-                    .spec(ResponseSpecs.requestReturnOkAndCheckNewName(initialName));
+                    .statusCode(HttpStatus.SC_OK)
+                    .body("customer.name", equalTo(initialName));
 
         }
 
         // Теперь меняем имя на новое
-        UpdateCustomerProfileRequest updateUser1 = UpdateCustomerProfileRequest.builder()
-                .name(newName)
-                .build();
-        new UpdateCustomerProfile(RequestSpecs.userAuthSpec(user1Token), newName)
-        .put(updateUser1);
-
         given()
-                .spec(RequestSpecs.userAuthSpec(user1Token))
-                .body(updateUser1)
-                .put("/api/v1/customer/profile")
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .header("Authorization", user1Token)
+                .body(String.format("""
+                        {
+                          "name": "%s"
+                        }
+                        """, newName))
+                .put("http://localhost:4111/api/v1/customer/profile")
                 .then()
                 .assertThat()
-                .spec(ResponseSpecs.requestReturnOkAndCheckNewName(newName));
+                .statusCode(HttpStatus.SC_OK)
+                .body("customer.name", equalTo(newName));
     }
-
     @Test
     @DisplayName("Пользователь может изменить себе имя на имя у другого пользователя")
     public void userCanUpdateNameToNameAnotherUserTest() {
         String duplicateName = "UserKate";
         // Задаем имя первому пользователю
-        UpdateCustomerProfileRequest user1update = UpdateCustomerProfileRequest.builder()
-                .name(duplicateName)
-                .build();
         given()
-                .spec(RequestSpecs.userAuthSpec(user1Token))
-                .body(user1update)
-                .put("/api/v1/customer/profile")
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .header("Authorization", user1Token)
+                .body(String.format("""
+                        {
+                          "name": "%s"
+                        }
+                        """, duplicateName))
+                .put("http://localhost:4111/api/v1/customer/profile")
                 .then()
                 .assertThat()
-                .spec(ResponseSpecs.requestReturnOkAndCheckNewName(duplicateName));
+                .statusCode(HttpStatus.SC_OK)
+                .body("customer.name", equalTo(duplicateName));
 
         // Задаем имя первого пользователя второму
-        UpdateCustomerProfileRequest user2update = UpdateCustomerProfileRequest.builder()
-                .name(duplicateName)
-                .build();
         given()
-                .spec(RequestSpecs.userAuthSpec(user2Token))
-                .body(user1update)
-                .put("/api/v1/customer/profile")
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .header("Authorization", user2Token)
+                .body(String.format("""
+                        {
+                          "name": "%s"
+                        }
+                        """, duplicateName))
+                .put("http://localhost:4111/api/v1/customer/profile")
                 .then()
                 .assertThat()
-                .spec(ResponseSpecs.requestReturnOkAndCheckNewName(duplicateName));
+                .statusCode(HttpStatus.SC_OK)
+                .body("customer.name", equalTo(duplicateName));
     }
 
     @ParameterizedTest
     @MethodSource("nameDataForCornerCases")
     @DisplayName("Пользователь может изменить имя на значение только из символов или чисел")
     public void useOnlySpecialSymbolsOrNumbersForNameTest(String newName) {
+        UpdateCustomerProfile updateCustomerProfile = UpdateCustomerProfile.
         given()
                 .contentType(ContentType.JSON)
                 .accept(ContentType.JSON)
@@ -198,21 +250,23 @@
                 .body("customer.name", equalTo(newName));
 
     }
-
     @ParameterizedTest
     @MethodSource("nameDataForNegativeCases")
     @DisplayName("Пользователь не может изменить имя на невалидное значение(пустое, только пробелы)")
     public void userCannotUpdateNameWithInvalidValue(String newName) {
-        UpdateCustomerProfileRequest user1update = UpdateCustomerProfileRequest.builder()
-                .name(newName)
-                .build();
         given()
-                .spec(RequestSpecs.userAuthSpec(user1Token))
-                .body(user1update)
-                .put("/api/v1/customer/profile")
+                .contentType(ContentType.JSON)
+                .accept(ContentType.JSON)
+                .header("Authorization", user1Token)
+                .body(String.format("""
+                        {
+                        "name":"%s"
+                        }
+                        """, newName))
+                .put("http://localhost:4111/api/v1/customer/profile")
                 .then()
                 .assertThat()
-                .spec(ResponseSpecs.requestReturnsBadRequest());
+                .statusCode(HttpStatus.SC_BAD_REQUEST);
     }
 
 }
\ No newline at end of file
Index: src/main/java/models/UpdateCustomerProfileRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Builder\r\n\r\npublic class UpdateCustomerProfileRequest extends BaseModel{\r\n    private String name;\r\n}\r\n
===================================================================
diff --git a/src/main/java/models/UpdateCustomerProfileRequest.java b/src/main/java/models/UpdateCustomerProfileRequest.java
--- a/src/main/java/models/UpdateCustomerProfileRequest.java	(revision 8aa6ee98b5f1ab1ec0abccf7456e7d0c10382bd2)
+++ b/src/main/java/models/UpdateCustomerProfileRequest.java	(date 1757597254675)
@@ -10,6 +10,6 @@
 @AllArgsConstructor
 @Builder
 
-public class UpdateCustomerProfileRequest extends BaseModel{
+public class UpdateCustomerProfileRequest {
     private String name;
 }
